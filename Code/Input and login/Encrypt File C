// encrypt_file.c
#include <openssl/conf.h>
#include <openssl/evp.h>
#include <openssl/err.h>
#include <openssl/rand.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void handleErrors(void) {
    ERR_print_errors_fp(stderr);
    abort();
}

void generate_key() {
    unsigned char key[32];
    RAND_bytes(key, sizeof(key));

    FILE *key_file = fopen("secret.key", "wb");
    fwrite(key, 1, sizeof(key), key_file);
    fclose(key_file);
}

void load_key(unsigned char *key) {
    FILE *key_file = fopen("secret.key", "rb");
    fread(key, 1, 32, key_file);
    fclose(key_file);
}

void encrypt_file(const char *file_name) {
    unsigned char key[32];
    load_key(key);

    FILE *file = fopen(file_name, "rb");
    fseek(file, 0, SEEK_END);
    long file_size = ftell(file);
    rewind(file);

    unsigned char *file_data = (unsigned char *)malloc(file_size);
    fread(file_data, 1, file_size, file);
    fclose(file);

    unsigned char iv[16];
    RAND_bytes(iv, sizeof(iv));

    EVP_CIPHER_CTX *ctx;
    int len;
    int ciphertext_len;
    unsigned char ciphertext[file_size + 16];

    if (!(ctx = EVP_CIPHER_CTX_new())) handleErrors();

    if (1 != EVP_EncryptInit_ex(ctx, EVP_aes_256_cbc(), NULL, key, iv)) handleErrors();

    if (1 != EVP_EncryptUpdate(ctx, ciphertext, &len, file_data, file_size)) handleErrors();
    ciphertext_len = len;

    if (1 != EVP_EncryptFinal_ex(ctx, ciphertext + len, &len)) handleErrors();
    ciphertext_len += len;

    EVP_CIPHER_CTX_free(ctx);

    FILE *enc_file = fopen(file_name, "wb");
    fwrite(iv, 1, sizeof(iv), enc_file);
    fwrite(ciphertext, 1, ciphertext_len, enc_file);
    fclose(enc_file);

    free(file_data);
}

int main(void) {
    generate_key();
    encrypt_file("test.txt");
    return 0;
}
