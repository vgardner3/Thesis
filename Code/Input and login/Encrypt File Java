// EncryptFile.java
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Base64;

public class EncryptFile {
    public static void generateKey() throws Exception {
        KeyGenerator keyGen = KeyGenerator.getInstance("AES");
        keyGen.init(256);
        SecretKey secretKey = keyGen.generateKey();
        Files.write(Paths.get("secret.key"), Base64.getEncoder().encode(secretKey.getEncoded()));
    }

    public static SecretKey loadKey() throws Exception {
        byte[] keyBytes = Base64.getDecoder().decode(Files.readAllBytes(Paths.get("secret.key")));
        return new SecretKeySpec(keyBytes, "AES");
    }

    public static void encryptFile(String fileName) throws Exception {
        SecretKey key = loadKey();
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, key);
        
        byte[] fileData = Files.readAllBytes(Paths.get(fileName));
        byte[] encryptedData = cipher.doFinal(fileData);
        
        Files.write(Paths.get(fileName), encryptedData);
    }

    public static void main(String[] args) throws Exception {
        generateKey();
        encryptFile("test.txt");
    }
}
